#define SEL00 A0
#define SEL01 A1
#define INTPin 2


int LedNumber = 5;     // 5 is a default number of LEDs
int currentDiode = 0;  // Current numer of LEDs turned ON
// LEDs PINS
const int LED1 = 9;
const int LED2 = 10;
const int LED3 = 11;
const int LED4 = 5;
const int LED5 = 6;
int Brightness = 150; // Brightnesd should be lower than 255
static unsigned long last_interrupt_time = 0 ;
unsigned long TimerStart = 0;
bool isLEDOn = false;
// Useful methods
void SerialInit();     // Init Serial with baudrate 115200 and print hello message
void CheckLEDNumber(int LedNumber); // Check how many leds are set
void TurnLedON();
void TurnAllLEDOff();
void Blinker();
bool CheckAvailablekLedNumber(int CurrentLedCnt);



void setup() {
  SerialInit();
  // Put SEL pin as INPUT
  pinMode(SEL00, INPUT);
  pinMode(SEL01, INPUT);
  // Put INTPin pin as INPUT
  pinMode(INTPin, INPUT);
  CheckLEDNumber();

  pinMode(OUTPUT,LED1);  
  pinMode(OUTPUT,LED2);
  pinMode(OUTPUT,LED3);
  pinMode(OUTPUT,LED4);
  pinMode(OUTPUT,LED5);


  
  attachInterrupt(digitalPinToInterrupt(INTPin), Blinker, LOW);
}

void CheckLEDNumber()
{
  // SEL00   SEL01    Count
  // 1        1       5
  // 1        0       4
  // 0        1       3
  // 0        0       2
  
  Serial.println("Lets read input");
  int SEL00State = digitalRead(SEL00);
  int SEL01State = digitalRead(SEL01);
  Serial.println("pin SEL00: " + String(SEL00State) + " and pin SEL01: " + String(SEL01State)); 
;

  switch (SEL00State){
  case 1:
    switch(SEL01State) {
      case 1:
        LedNumber = 5;
        break;
      case 0:
        LedNumber = 4;
      break;
    }
    break;
  case 0:
      switch(SEL01State) {
        case 1:
          LedNumber = 3;
          break;
        case 0:
          LedNumber = 2;
          break;
      break;  
    default:
      Serial.println("Cannot set LED's number");
    }
  }
  Serial.println("LEDs number set to: " + String(LedNumber));
}

void loop() {
  if (isLEDOn)
  {
    unsigned long CurrentTimerValue = millis();
    Serial.println(String("Start timer value: " ) + String(TimerStart));
    Serial.println(String("Current timer value: " ) + String(CurrentTimerValue));
    unsigned long Roznica = CurrentTimerValue - TimerStart;
    Serial.println(String("roznicae: " ) + String(CurrentTimerValue - TimerStart));
    Serial.println(String(Roznica));
    delay(1000);
  
  if (isLEDOn and (Roznica >= 60000))
  {
    Serial.println("Czas minal");
    TurnAllLEDOff();
  }
  }
  
}




void SerialInit()
{
  Serial.begin(115200);
  Serial.println("Serial - started");
}


void TurnLedON(int LedNumber)
{
    isLEDOn = true;
    Serial.println("Turn LED: " + String(LedNumber));
    switch (LedNumber) {
    case 0:    
      Serial.println("No LED");
      break;
    case 1:    
      analogWrite(LED1,Brightness);
      break;
    case 2:   
      analogWrite(LED2,Brightness);
      break;
    case 3:  
      analogWrite(LED3,Brightness);
      break;
    case 4: 
      analogWrite(LED4,Brightness);
      break;
    case 5:
      analogWrite(LED5,Brightness);
      break;
      
  }   
}


void  TurnAllLEDOff()
{
  for(int i=1; i <= LedNumber;i++)
  {
  Serial.println("Turn LED off: " + String(i));
    switch (i) {
    case 0:    
      Serial.println("No LED");
      break;
    case 1:    
      analogWrite(LED1,0);
      break;
    case 2:   
      analogWrite(LED2,0);
      break;
    case 3:  
      analogWrite(LED3,0);
      break;
    case 4: 
      analogWrite(LED4,0);
      break;
    case 5:
      analogWrite(LED5,0 );
      break;
    default:
      break;
      
    } 
  }
  currentDiode = 0;
  isLEDOn = false;
//  TimerStart = 0;
}

void Blinker()
{
  unsigned long interrupt_time = millis();
//  Serial.println("Interupt");
  if (interrupt_time - last_interrupt_time > 200)
  {
    Serial.println("Interrupt get millis value");
    TimerStart = millis();
    currentDiode++;
    bool result = CheckAvailablekLedNumber(currentDiode);
    if (result) 
    {
      TurnLedON(currentDiode);
    }
    else {
     Serial.println("Wylaczamy diody");
     TurnAllLEDOff();     
    }
  } 
  else {
//    Serial.println("nie ma przerwania");
    delay(100);    
  }
  last_interrupt_time = interrupt_time;
}

bool CheckAvailablekLedNumber(int CurrentLedCnt){
  Serial.println("CheckAvailablekLedNumber - started");
  Serial.println(String("Current led number ") + String(CurrentLedCnt));
  if ( CurrentLedCnt <= LedNumber )
  {
     return true;
  }
  else
  {
     return false;
  }
}
